{
    "collab_server" : "",
    "contents" : "allCompanies <- function(admin, password, host, tickettable, venuetable, eventtable, productiontable, companytable, dbname)\n{\n  library(RMySQL)\n  con <- dbConnect(MySQL(),user=admin, password=password, host=host, dbname=dbname)\n  companies <- dbReadTable(conn = con, name = companytable)\n  companies[3] <- list(NULL)\n  companies <- companies[order(companies$companyName, decreasing = FALSE, na.last = TRUE),]\n  data.table::setDT(companies)\n  companies <- data.frame(companies)\n  companies$index <- as.numeric(row.names(companies)) - 1\n  dbDisconnect(conn = con)\n  print(companies)\n}\n\nuserValidCheck <- function(admin,password,host,table,dbname,userID,ipAddress,activeKey)\n{\n  library(RMySQL)\n  userID <- as.numeric(userID)\n  time <- Sys.time()\n  con <- dbConnect(MySQL(),user=admin, password=password, host=host, dbname=dbname)\n  statement <- paste(\"SELECT * FROM \",table,\" WHERE activeKey = '\",activeKey,\"';\", sep = \"\")\n  logDetails <- dbGetQuery(conn = con, statement = statement)\n  numLogDetails <- nrow(logDetails)\n  if (numLogDetails == 0)\n  {\n    numDBRows <- nrow(dbReadTable(conn = con,name = table))\n    numDBRows = numDBRows + 1\n    statement = paste(\"INSERT INTO \",table,\" (row_names, userID, ipAddress, activeKey, time) VALUES (\",numDBRows,\",\",userID,\",\",\"'\",ipAddress,\"',\",\"'\",activeKey,\"',\",\"'\",time,\"');\",sep = \"\")\n    dbGetQuery(conn = con, statement = statement)\n    userValid <- \"TRUE\"\n  } else if (numLogDetails == 1)\n  {\n    if (logDetails$ipAddress[1] == ipAddress & logDetails$userID[1] == userID)\n    {\n      userValid <- \"TRUE\"\n    } else\n      userValid <- \"FALSE\"\n  }\n  dbDisconnect(conn = con)\n  print(userValid)\n}\n\ncompaniesLinkedUserID <- function(admin,password,host,companytable,ownershiptable,tpcompanytable,dbname,userID)\n{\n  library(RMySQL)\n  userID <- as.numeric(userID)\n  # Test if SuperUser, currently UserID #5\n  if (userID == 5 | userID == 974 | userID == 107)\n  {\n    con <- dbConnect(MySQL(),user=admin, password=password, host=host, dbname=dbname)\n    companies <- dbReadTable(conn = con, name = companytable)\n    companies[3] <- list(NULL)\n    companies <- companies[order(companies$companyName, decreasing = FALSE, na.last = TRUE),]\n    data.table::setDT(companies)\n    companies <- data.frame(companies)\n    companies$index <- as.numeric(row.names(companies)) - 1\n  } else if (userID != 5 | userID != 974 | userID != 107)\n  {\n    con <- dbConnect(MySQL(),user=admin, password=password, host=host, dbname=dbname)\n    statement <- paste(\"SELECT * FROM \",ownershiptable,\" WHERE userID = \",userID,\";\",sep = \"\")\n    companyOwnership <- dbGetQuery(conn = con, statement = statement)\n    numCompanies <- nrow(companyOwnership)\n    companyIDList <- \"\"\n    for (i in 1:numCompanies)\n    {\n      companyIDList <- paste(companyIDList,\",\",companyOwnership$companyID[i],sep = \"\")\n    }\n    companyIDList <- substr(companyIDList,2,nchar(companyIDList))\n\n    #Grab Company Names and tttcCompanyIDs from tbl_tttcompany table\n    statement <- paste(\"SELECT id, companyName FROM \",companytable,\" WHERE tpCompanyID IN (\",companyIDList,\");\", sep = \"\")\n    companies <- dbGetQuery(conn = con, statement = statement)\n    data.table::setDT(companies)\n    companies <- data.frame(companies)\n    companies$index <- as.numeric(row.names(companies)) - 1\n  }\n  dbDisconnect(conn = con)\n  print(companies)\n\n}\n\ncompanyShowsPerformance <- function(admin,password,host,tickettable,venuetable,eventtable,productiontable,dbname,organizationID,startDate,endDate)\n{\n  library(RMySQL)\n  con <- dbConnect(MySQL(),user=admin, password=password, host=host, dbname=dbname)\n  statement <- paste(\"SELECT* FROM \",venuetable,\" WHERE tttcCompanyID = \",organizationID,\";\", sep = \"\")\n\n  # Grab all venues tied to Company ID\n  tttcVenueID = dbGetQuery(conn = con, statement = statement)\n  numTTTCVenues <- nrow(tttcVenueID)\n  venueIDList <- \"\"\n  for (i in 1:numTTTCVenues)\n  {\n    venueIDList <- paste(venueIDList,\",\",tttcVenueID$id[i],sep = \"\")\n  }\n  venueIDList <- substr(venueIDList,2,nchar(venueIDList))\n\n  # Grab all productions tied to Venue ID\n  statement <- paste(\"SELECT * FROM \",productiontable,\" WHERE tttcVenueID IN (\",venueIDList,\");\", sep = \"\")\n  tttcProductionID <- dbGetQuery(conn = con, statement = statement)\n\n  #Grab all events tied to Production ID\n  numTTTCProductions <- nrow(tttcProductionID)\n  productionIDList <- \"\"\n  for (i in 1:numTTTCProductions)\n  {\n    productionIDList <- paste(productionIDList,\",\",tttcProductionID$id[i],sep = \"\")\n  }\n  productionIDList <- substr(productionIDList,2,nchar(productionIDList))\n  statement <- paste(\"SELECT * FROM \",eventtable,\" WHERE tttcProductionID IN (\",productionIDList,\");\", sep = \"\")\n  tttcEventID <- dbGetQuery(conn = con, statement = statement)\n\n  #Filter out date range to only include productions from that time period\n  startDate <- substr(startDate,1,10)\n  endDate <- substr(endDate,1,10)\n  tttcEventID <- tttcEventID[which(as.Date(tttcEventID$eventDate) >= as.Date(startDate) & as.Date(tttcEventID$eventDate) <= as.Date(endDate)),]\n  uniqueProds <- unique(tttcEventID$tttcProductionID)\n  numUniqueProds <- length(uniqueProds)\n  filteredTTTCProductionID <- data.frame()\n  for (i in 1:numUniqueProds)\n  {\n    singleTTTCProduction <- tttcProductionID[which(tttcProductionID$id == uniqueProds[i]),]\n    filteredTTTCProductionID <- rbind(filteredTTTCProductionID,singleTTTCProduction)\n  }\n  tttcProductionID <- filteredTTTCProductionID\n  numTTTCProductions <- nrow(tttcProductionID)\n\n  #Grab tickets tied to Event IDs\n  numTTTCEvents <- nrow(tttcEventID)\n  eventIDList <- \"\"\n  for (i in 1:numTTTCEvents)\n  {\n    eventIDList <- paste(eventIDList,\",\",tttcEventID$id[i],sep = \"\")\n  }\n  eventIDList <- substr(eventIDList,2,nchar(eventIDList))\n  statement <- paste(\"SELECT * FROM \",tickettable,\" WHERE tttcEventID IN (\",eventIDList,\");\", sep = \"\")\n  ticketsCompany <- dbGetQuery(conn = con, statement = statement)\n\n  # Tickets By Show\n  totalTicketsSold <- sum(ticketsCompany$quantity)\n  ticketsByShow <- data.frame(tttcProductionID$id,tttcProductionID$title,netSales = 0,netAttendedTickets = 0,netPurchasedTickets = 0,totalCompedProdTkts = 0,totalRefundedProdTkts = 0,pctCapacity = 0,numEvents = 0)\n  for (i in 1:numTTTCProductions)\n  {\n    eventsTied2Prod <- tttcEventID$id[which(tttcEventID$tttcProductionID == tttcProductionID$id[i])]\n    numEventsTied2Prod <- length(eventsTied2Prod)\n    totalProductionTickets <- 0\n    netPurchasedTickets <- 0\n    totalCompedProdTkts <- 0\n    totalRefundedProdTkts <- 0\n    netSalesProduction <- 0\n    k = 1\n    pctCapacityEvent <- 0\n    for (j in 1:numEventsTied2Prod)\n    {\n      ticketsSoldAtEvent <- sum(ticketsCompany$quantity[which(ticketsCompany$tttcEventID == eventsTied2Prod[j])])\n      totalProductionTickets <- totalProductionTickets + ticketsSoldAtEvent\n      ticketsCompedAtEvent <-  sum(ticketsCompany$quantity[which(ticketsCompany$tttcEventID == eventsTied2Prod[j] & ticketsCompany$boxOfficeComp == 1)])\n      totalCompedProdTkts <- totalCompedProdTkts + ticketsCompedAtEvent\n      ticketsRefundedAtEvent <- sum(ticketsCompany$quantity[which(ticketsCompany$tttcEventID == eventsTied2Prod[j] & ticketsCompany$refundSale == 1)])\n      totalRefundedProdTkts <- totalRefundedProdTkts + ticketsRefundedAtEvent\n      ticketSalesAtEvent <-  sum(ticketsCompany$netTotal[which(ticketsCompany$tttcEventID == eventsTied2Prod[j] & ticketsCompany$refundSale == 0 & ticketsCompany$boxOfficeComp == 0)])\n      netSalesProduction <- netSalesProduction + ticketSalesAtEvent\n\n      #Capacity grabbed and calculated from each event\n      productionIDFromEvent <- tttcEventID$tttcProductionID[which(tttcEventID$id == eventsTied2Prod[j])]\n      venueIDFromProduction <- tttcProductionID$tttcVenueID[which(tttcProductionID$id == productionIDFromEvent)]\n      capacityVenue <- tttcVenueID$capacity[which(tttcVenueID$id == venueIDFromProduction)]\n      pctCapacityEvent[k] <- round(((ticketsSoldAtEvent - ticketsRefundedAtEvent) / capacityVenue) * 100, 2)\n      k = k + 1\n    }\n    netPurchasedTickets <- totalProductionTickets - totalCompedProdTkts - totalRefundedProdTkts\n    netAttendedTickets <- totalProductionTickets - totalRefundedProdTkts\n\n    #Add all ticket sales for production\n    ticketsByShow$netSales[i] = netSalesProduction\n    ticketsByShow$netAttendedTickets[i] = netAttendedTickets\n    ticketsByShow$netPurchasedTickets[i] = netPurchasedTickets\n    ticketsByShow$totalCompedProdTkts[i] = totalCompedProdTkts\n    ticketsByShow$totalRefundedProdTkts[i] = totalRefundedProdTkts\n    ticketsByShow$pctCapacity[i] = round(mean(pctCapacityEvent),2)\n    ticketsByShow$numEvents[i] = numEventsTied2Prod\n  }\n  ticketsByShow$pctTotalPurchasedTkts <- round((ticketsByShow$netPurchasedTickets / sum(ticketsByShow$netPurchasedTickets)) * 100,2)\n  ticketsByShow <- ticketsByShow[order(ticketsByShow$netSales,ticketsByShow$pctTotalPurchasedTkts,decreasing = TRUE,na.last = TRUE),]\n  ticketsByShow$pctPaidAttendees <- round((ticketsByShow$netPurchasedTickets / ticketsByShow$netAttendedTickets) * 100, 2)\n  ticketsByShow$avgTktPrice <- round((ticketsByShow$netSales / (ticketsByShow$netPurchasedTickets)),2)\n  dbDisconnect(conn = con)\n  data.table::setDT(ticketsByShow)\n  ticketsByShow <- data.frame(ticketsByShow)\n  ticketsByShow$index <- as.numeric(row.names(ticketsByShow)) - 1\n\n  #Calculate Totals for All Shows\n  netSales <- sum(ticketsByShow$netSales)\n  netAttendedTickets <- sum(ticketsByShow$netAttendedTickets)\n  netPurchasedTickets <- sum(ticketsByShow$netPurchasedTickets)\n  totalCompedProdTkts <- sum(ticketsByShow$totalCompedProdTkts)\n  totalRefundedProdTkts <- sum(ticketsByShow$totalRefundedProdTkts)\n  pctCapacity <- round(mean(ticketsByShow$pctCapacity),2)\n  numEvents <- sum(ticketsByShow$numEvents)\n  pctTotalPurchasedTkts <- sum(ticketsByShow$pctTotalPurchasedTkts)\n  pctPaidAttendees <- round(mean(ticketsByShow$pctPaidAttendees),2)\n  avgTktPrice <- round(mean(ticketsByShow$avgTktPrice),2)\n  totalsTBS <- data.frame(tttcProductionID.id = 0, tttcProductionID.title = \"All Shows\",netSales,netAttendedTickets,netPurchasedTickets,totalCompedProdTkts,totalRefundedProdTkts,pctCapacity,numEvents,pctTotalPurchasedTkts,pctPaidAttendees,avgTktPrice,index = (nrow(ticketsByShow)))\n  ticketsByShow <- rbind(ticketsByShow,totalsTBS)\n  print(ticketsByShow)\n}\n\nshowEventDetails <- function(admin,password,host,tickettable,eventtable,dbname,productionID,startDate,endDate)\n{\n  library(RMySQL)\n  library(lubridate)\n  con <- dbConnect(MySQL(),user=admin, password=password, host=host, dbname=dbname)\n  statement <- paste(\"SELECT * FROM \",eventtable,\" WHERE tttcProductionID = \",productionID,\";\",sep = \"\")\n  tttcEventID <- dbGetQuery(conn = con, statement = statement)\n\n  #Filter out date range to only include productions from that time period\n  startDate <- substr(startDate,1,10)\n  endDate <- substr(endDate,1,10)\n  tttcEventID <- tttcEventID[which(as.Date(tttcEventID$eventDate) >= as.Date(startDate) & as.Date(tttcEventID$eventDate) <= as.Date(endDate)),]\n\n  numEvents <- nrow(tttcEventID)\n  tttcEventID$numAttended <- 0\n  tttcEventID$wdayNum <- wday(as.Date(tttcEventID$eventDate))\n  tttcEventID$weekday <- \"\"\n  tttcEventID$time <- substr(tttcEventID$eventDate,nchar(tttcEventID$eventDate)-7,nchar(tttcEventID$eventDate)-3)\n  for (i in 1:numEvents)\n  {\n    statement <- paste(\"SELECT * FROM \",tickettable,\" WHERE tttcEventID = \",tttcEventID$id[i],\";\", sep = \"\")\n    eventTickets <- dbGetQuery(conn = con, statement = statement)\n    eventTickets <- eventTickets[which(eventTickets$refundSale == 0),]\n    eventTickets <- eventTickets[which(eventTickets$refundSale == 0),]\n    tttcEventID$numAttended[i] <- sum(eventTickets$quantity)\n    if (tttcEventID$wdayNum[i] == 1)\n    {\n      tttcEventID$weekday[i] <- 'Sunday'\n    } else if (tttcEventID$wdayNum[i] == 5)\n    {\n      tttcEventID$weekday[i] <- 'Thursday'\n    } else if (tttcEventID$wdayNum[i] == 6)\n    {\n      tttcEventID$weekday[i] <- 'Friday'\n    } else if (tttcEventID$wdayNum[i] == 7)\n    {\n      tttcEventID$weekday[i] <- 'Saturday'\n    } else if (tttcEventID$wdayNum[i] == 2)\n    {\n      tttcEventID$weekday[i] <- 'Monday'\n    } else if (tttcEventID$wdayNum[i] == 3)\n    {\n      tttcEventID$weekday[i] <- 'Tuesday'\n    } else if (tttcEventID$wdayNum[i] == 4)\n    {\n      tttcEventID$weekday[i] <- 'Wednesday'\n    }\n  }\n\n  #Calculate Avg Attendance by Day\n  avgAttdnByDay <- data.frame()\n  days <- unique(tttcEventID$weekday)\n  numDays <- length(days)\n  for (i in 1:numDays)\n  {\n    avgAttendance <- round(mean(tttcEventID$numAttended[which(tttcEventID$weekday == days[i])]),2)\n    avgAttdnByDay <- rbind(avgAttdnByDay,data.frame(days[i],avgAttendance))\n  }\n\n  #Calculate Avg Attendance by Time\n  avgAttdnByTime <- data.frame()\n  times <- unique(tttcEventID$time)\n  numTimes <- length(times)\n  for (i in 1:numTimes)\n  {\n    avgAttendance <- round(mean(tttcEventID$numAttended[which(tttcEventID$time == times[i])]),2)\n    avgAttdnByTime <- rbind(avgAttdnByTime,data.frame(times[i],avgAttendance))\n  }\n  tttcEventID$eventDate <- substr(tttcEventID$eventDate,1,10)\n  tttcEventID$eventDate <- format(as.Date(tttcEventID$eventDate), format = \"%b-%d-%y\")\n  for (i in 1:numEvents)\n  {\n    if (as.numeric(substr(tttcEventID$time[i],1,2)) <= 13)\n    {\n      tttcEventID$eventDate[i] <- paste(tttcEventID$eventDate[i],\" M\",sep = \"\")\n    } else if (as.numeric(substr(tttcEventID$time[i],1,2)) <= 17)\n    {\n      tttcEventID$eventDate[i] <- paste(tttcEventID$eventDate[i],\" A\",sep = \"\")\n    } else if (as.numeric(substr(tttcEventID$time[i],1,2)) <= 20)\n    {\n      tttcEventID$eventDate[i] <- paste(tttcEventID$eventDate[i],\" E\",sep = \"\")\n    } else\n      tttcEventID$eventDate[i] <- paste(tttcEventID$eventDate[i],\" N\",sep = \"\")\n  }\n  avgAttdnByDay <- avgAttdnByDay[order(avgAttdnByDay$avgAttendance, decreasing = TRUE, na.last = TRUE),]\n  avgAttdnByTime <- avgAttdnByTime[order(avgAttdnByTime$avgAttendance, decreasing = TRUE, na.last = TRUE),]\n  showDetails <- list(tttcEventID,avgAttdnByDay,avgAttdnByTime)\n  dbDisconnect(conn = con)\n  print(showDetails)\n}\n\nshowEventGeography <- function(admin,password,host,otheradmin,otherpassword,otherhost,tickettable,usertable,eventtable,dbname,geotable,tatheatredb,productionID,startDate,endDate)\n{\n  library(RMySQL)\n  library(zipcode)\n  library(data.table)\n  con <- dbConnect(MySQL(),user=admin, password=password, host=host, dbname=dbname)\n  statement <- paste(\"SELECT * FROM \",eventtable,\" WHERE tttcProductionID = \",productionID,\";\",sep = \"\")\n  tttcEventID <- dbGetQuery(conn = con, statement = statement)\n\n  #Filter out date range to only include productions from that time period\n  startDate <- substr(startDate,1,10)\n  endDate <- substr(endDate,1,10)\n  tttcEventID <- tttcEventID[which(as.Date(tttcEventID$eventDate) >= as.Date(startDate) & as.Date(tttcEventID$eventDate) <= as.Date(endDate)),]\n\n  numEvents <- nrow(tttcEventID)\n  queryEventIDs <- \"\"\n  for (i in 1:numEvents)\n  {\n    queryEventIDs <- paste(queryEventIDs,\",\",tttcEventID$id[i],sep = \"\")\n  }\n  queryEventIDs <- substr(queryEventIDs,2,nchar(queryEventIDs))\n  statement <- paste(\"SELECT * FROM \",tickettable,\" WHERE tttcEventID IN (\",queryEventIDs,\");\", sep = \"\")\n  eventTickets <- dbGetQuery(conn = con, statement = statement)\n  eventTickets <- eventTickets[which(eventTickets$refundSale == 0),]\n  eventTickets <- eventTickets[which(eventTickets$refundSale == 0),]\n  numTickets <- nrow(eventTickets)\n  queryUserIDs <- \"\"\n  for (i in 1:numTickets)\n  {\n    queryUserIDs <- paste(queryUserIDs,\",\",eventTickets$tttcUserID[i],sep = \"\")\n  }\n  queryUserIDs <- substr(queryUserIDs,2,nchar(queryUserIDs))\n  statement <- paste(\"SELECT * FROM \",usertable,\" WHERE id IN (\",queryUserIDs,\");\", sep = \"\")\n  usersFromEvents <- dbGetQuery(conn = con, statement = statement)\n  zipCodesEvents <- unique(usersFromEvents$zip)\n  numZips <- length(zipCodesEvents)\n  ticketsByZip <- data.frame(zipCodesEvents)\n  ticketsByZip$attendance <- 0\n  for (i in 1:numZips)\n  {\n    totalTickets <- 0\n    userIDZipMatch <- usersFromEvents$id[which(usersFromEvents$zip == zipCodesEvents[i])]\n    numUserIDZipMatch <- length(userIDZipMatch)\n    for (j in 1:numUserIDZipMatch)\n    {\n      singleCount <- length(which(userIDZipMatch[j] == eventTickets$tttcUserID))\n      totalTickets <- totalTickets + singleCount\n    }\n    ticketsByZip$attendance[i] = totalTickets\n  }\n  ticketsByZip <- ticketsByZip[order(ticketsByZip$attendance, decreasing = TRUE, na.last = TRUE),]\n  ticketsByZip$zipCodesEvents <- as.character(ticketsByZip$zipCodesEvents)\n  ticketsByZip$zipCodesEvents[which(ticketsByZip$zipCodesEvents == \"\")] = \"Box Office\"\n  ticketsByZip <- ticketsByZip[1:10,]\n  dbDisconnect(conn = con)\n  con <- dbConnect(MySQL(),user=otheradmin, password=otherpassword, host=otherhost, dbname=tatheatredb)\n  zipList <- dbReadTable(conn = con, name = geotable)\n  dbDisconnect(conn = con)\n  ticketsByZip$city <- \"\"\n  for (i in 1:10)\n  {\n    if(ticketsByZip$zipCodesEvents[i] != \"Box Office\")\n    {\n      ticketsByZip$city[i] <- zipList$V2[which(substr(ticketsByZip$zipCodesEvents[i],1,3) == zipList$V3)]\n    }\n  }\n  print(ticketsByZip)\n}\n\nshowPeerComparison <- function(admin,password,host,tickettable,eventtable,venuetable,tpshowtable,showtable,productiontable,dbname,productionID)\n{\n  library(RMySQL)\n  con <- dbConnect(MySQL(),user=admin, password=password, host=host, dbname=dbname)\n  statement <- paste(\"SELECT tttcShowID FROM \",productiontable,\" WHERE id = \",productionID,\";\",sep = \"\")\n  tttcShowID <- as.numeric(dbGetQuery(conn = con, statement = statement))\n  statement <- paste(\"SELECT tpShowID, title FROM \",showtable,\" WHERE id = \",tttcShowID,\";\",sep = \"\")\n  tpShowID <- dbGetQuery(conn = con, statement = statement)\n  if (tpShowID$tpShowID[1] != 0)\n  {\n    statement <- paste(\"SELECT id FROM \",showtable,\" WHERE tpShowID = \",tpShowID$tpShowID,\";\",sep = \"\")\n    peerShowIDs <- dbGetQuery(conn = con, statement = statement)\n    peerShowIDs <- peerShowIDs[which(peerShowIDs$id != tttcShowID),]\n    numPeerShows <- length(peerShowIDs)\n    queryPeerShowIDs <- \"\"\n    is.integer0 <- function(x)\n    {\n      is.integer(x) && !length(x)\n    }\n    if (!(is.integer0(peerShowIDs)))\n    {\n      for (i in 1:numPeerShows)\n      {\n        queryPeerShowIDs <- paste(queryPeerShowIDs,\",\",peerShowIDs[i],sep = \"\")\n      }\n      queryPeerShowIDs <- substr(queryPeerShowIDs,2,nchar(queryPeerShowIDs))\n      statement <- paste(\"SELECT id, tttcVenueID FROM \",productiontable,\" WHERE tttcshowID IN (\",queryPeerShowIDs,\");\",sep = \"\")\n      peerProductionIDs <- dbGetQuery(conn = con, statement = statement)\n      numPeerProductions <- nrow(peerProductionIDs)\n      queryPeerProductionIDs <- \"\"\n      queryPeerVenueIDs <- \"\"\n      for (i in 1:numPeerProductions)\n      {\n        queryPeerProductionIDs <- paste(queryPeerProductionIDs,\",\",peerProductionIDs$id[i],sep = \"\")\n        queryPeerVenueIDs <- paste(queryPeerVenueIDs,\",\",peerProductionIDs$tttcVenueID[i],sep = \"\")\n      }\n      queryPeerProductionIDs <- substr(queryPeerProductionIDs,2,nchar(queryPeerProductionIDs))\n      queryPeerVenueIDs <- substr(queryPeerVenueIDs,2,nchar(queryPeerVenueIDs))\n      statement <- paste(\"SELECT * FROM \",eventtable,\" WHERE tttcProductionID IN (\",queryPeerProductionIDs,\");\",sep = \"\")\n      tttcEventID <- dbGetQuery(conn = con, statement = statement)\n\n      #Grab tickets tied to Event IDs\n      numTTTCEvents <- nrow(tttcEventID)\n      eventIDList <- \"\"\n      for (i in 1:numTTTCEvents)\n      {\n        eventIDList <- paste(eventIDList,\",\",tttcEventID$id[i],sep = \"\")\n      }\n      eventIDList <- substr(eventIDList,2,nchar(eventIDList))\n      statement <- paste(\"SELECT * FROM \",tickettable,\" WHERE tttcEventID IN (\",eventIDList,\");\", sep = \"\")\n      ticketsCompany <- dbGetQuery(conn = con, statement = statement)\n\n      # Peer Ticket Data\n      totalTicketsSold <- sum(ticketsCompany$quantity)\n      ticketsByShow <- data.frame(tpShowID$tpShowID,tpShowID$title,netSales = 0,netAttendedTickets = 0,netPurchasedTickets = 0,totalCompedProdTkts = 0,totalRefundedProdTkts = 0, pctCapacity = 0, numEvents = 0)\n      ticketsByShow$netSales[1] <-  sum(ticketsCompany$netTotal[which(ticketsCompany$refundSale == 0 & ticketsCompany$boxOfficeComp == 0)])\n      ticketsByShow$netAttendedTickets[1] <- sum(ticketsCompany$quantity[which(ticketsCompany$refundSale == 0)])\n      ticketsByShow$totalCompedProdTkts[1] <- sum(ticketsCompany$quantity[which(ticketsCompany$refundSale == 0 & ticketsCompany$boxOfficeComp == 1)])\n      ticketsByShow$netPurchasedTickets[1] <- sum(ticketsCompany$quantity[which(ticketsCompany$refundSale == 0 & ticketsCompany$boxOfficeComp == 0)])\n      ticketsByShow$totalRefundedProdTkts[1] <- sum(ticketsCompany$quantity[which(ticketsCompany$refundSale == 1 & ticketsCompany$boxOfficeComp == 0)])\n      ticketsByShow$numEvents[1] <- length(unique(ticketsCompany$tttcEventID))\n      ticketsByShow$avgTktPrice[1] <- round((ticketsByShow$netSales[1] / ticketsByShow$netPurchasedTickets[1]), 2)\n      ticketsByShow$pctPaidAttendees[1] <- round((ticketsByShow$netPurchasedTickets[1] / ticketsByShow$netAttendedTickets[1])*100, 2)\n\n      #Grab capacity from Venues table\n      statement <- paste(\"SELECT capacity FROM \",venuetable,\" WHERE id IN (\",queryPeerVenueIDs,\");\",sep = \"\")\n      venueCapacities <- dbGetQuery(conn = con, statement = statement)\n      avgCapacity <- mean(venueCapacities$capacity)\n      avgTktsPerShow <- ticketsByShow$netAttendedTickets[1] / ticketsByShow$numEvents[1]\n      ticketsByShow$pctCapacity[1] <- round((avgTktsPerShow / avgCapacity) * 100, 2)\n      ticketsByShow$totalEvents <- 0\n      ticketsByShow$totalEvents[1] <- round(ticketsByShow$numEvents[1] / nrow(peerProductionIDs), 2)\n    } else if (is.integer0(peerShowIDs))\n    {\n      ticketsByShow <- data.frame(tpShowID$tpShowID,tpShowID$title,netSales = 0,netAttendedTickets = 0,netPurchasedTickets = 0,totalCompedProdTkts = 0,totalRefundedProdTkts = 0, pctCapacity = 0, numEvents = 0, totalEvents = 0, avgTktPrice = 0, pctPaidAttendees = 0)\n    }\n  } else if (tpShowID$tpShowID[1] == 0)\n  {\n    ticketsByShow <- data.frame(tpShowID$tpShowID,tpShowID$title,netSales = 0,netAttendedTickets = 0,netPurchasedTickets = 0,totalCompedProdTkts = 0,totalRefundedProdTkts = 0, pctCapacity = 0, numEvents = 0, totalEvents = 0, avgTktPrice = 0, pctPaidAttendees = 0)\n  }\n  dbDisconnect(conn = con)\n  print(ticketsByShow)\n}\n",
    "created" : 1501176521715.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1355475845",
    "id" : "7A93F07A",
    "lastKnownWriteTime" : 1503225939,
    "last_content_update" : 1503225939208,
    "path" : "~/TAtheatreprofileMAIN/R/TAtheatreprofileMAIN.R",
    "project_path" : "R/TAtheatreprofileMAIN.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}